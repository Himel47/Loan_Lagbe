@using LoanData.ViewModels;

@model GroupLoanFormViewModel

@functions {
    int loanId = 1;
    int serial = 0;
    public int GenerateId()
    {
        return loanId++;
    }
    public int SerialIncreaseByOne()
    {
        return serial++;
    }
}

<style>

    .loan-details-form {
        max-height: 650px;
        width: 100%;
        overflow: scroll;
        overscroll-behavior: contain;
        scrollbar-color: unset;
        scrollbar-width: thin;
        scrollbar-color: #888888 #ffffff;
    }


    .loan-details-form::-webkit-scrollbar {
        width: 8px;
    }

    .loan-details-form::-webkit-scrollbar-track {
        background-color: #ffffff;
    }

    .loan-details-form::-webkit-scrollbar-thumb {
        background-color: #888888;
    }

    .input-size {
        width: 70px;
        text-align: center;
        justify-content:center;
        align-items:center;
    }

    .readonly-input {
        background-color: lightgrey !important;
        border: none;
    }

    thead tr td {
        font-size: 16px;
    }

    .installmentSelect{
        font-size:19px;
    }


</style>

<section class="loan-planning-section">
    <div class="container-fluid">
        <div class="d-flex justify-content-between mt-2 mb-3">
            <h2>Loans Plan: Group <u class="text-warning">@Model.SelectedGroupName</u></h2>

            <a class="btn btn-outline-danger btn-sm px-4 mb-3" asp-controller="Group" asp-action="LoansIndex">Cancel</a>
        </div>
        <hr />
        <div class="my-4 row">
            @if (Model.GroupMemebrs.Count != 0)
            {
                <div class="container" id="loan-details-form">
                    <form method="post" asp-controller="Loan" asp-action="GroupLoan">
                        <table class="table" id="table-id">
                            <thead class="table-primary text-center">
                                <tr>
                                    <th>X</th>
                                    <th>Member Name</th>
                                    <th>Loans Amount</th>
                                    <th>Refund Period (in Month)</th>
                                    <th>Installment Period (in Days)</th>
                                    <th>Total Installment</th>
                                    <th>Interest Rate</th>
                                    <th>Processing Fee</th>
                                    <th>Other charge</th>
                                    <th>Total Interest</th>
                                    <th>Total charge</th>
                                    <th>Total Amount</th>
                                    <th>Amount per Installment</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var member in Model.GroupMemebrs)
                                {
                                    <input data-serial="@serial" asp-for="@Model.Loans[serial].MemberNID" value="@member.NID" hidden />
                                    <input data-serial="@serial" asp-for="@Model.Loans[serial].MemberNID" value="@member.NID" hidden />
                                    <input data-serial="@serial" asp-for="@Model.Loans[serial].GroupId" value="@Model.SelectedGroupId" hidden />
                                    <input data-serial="@serial" asp-for="@Model.Loans[serial].GroupId" value="@Model.SelectedGroupId" hidden />
                                    <tr class="text-center my-2">
                                        <td>@GenerateId()</td>
                                        <td class="text-start">
                                            @member.Name
                                        </td>
                                        <td class="amount">
                                            <input data-serial="@serial" asp-for="Loans[serial].LoanAmount" type="number" class="input-size" min="1" value="10000" />
                                        </td>
                                        <td class="submissionTime">
                                            <input data-serial="@serial" asp-for="Loans[serial].SubmissionTimeInMonth" type="number" class="input-size" min="1" value="6" />
                                        </td>
                                        <td class="installment-days">
                                            <select data-serial="@serial" class="input-size installmentSelect" asp-for="Loans[serial].InstallmentDays" asp-items="Model.SubmissionPeriod"></select>
                                        </td>
                                        <td class="installmentCount">
                                            <input data-serial="@serial" asp-for="Loans[serial].InstallmentCount" type="number" class="input-size readonly-input" min="1" value="25" readonly />
                                        </td>
                                        <td class="interest-rate">
                                            <input data-serial="@serial" asp-for="Loans[serial].InterestRate" type="number" class="input-size" min="1" value="8" />
                                        </td>
                                        <td class="processingFee">
                                            <input data-serial="@serial" asp-for="Loans[serial].ProcessingFee" type="number" class="input-size readonly-input" min="0" value="120" readonly/>
                                        </td>
                                        <td class="extraCharge">
                                            <input data-serial="@serial" asp-for="Loans[serial].ExtraCharge" type="number" class="input-size" min="0" value="0" />
                                        </td>
                                        <td class="totalInterest">
                                            <input data-serial="@serial" id="totalInterest-@serial" class="input-size readonly-input" value="800" readonly />
                                        </td>
                                        <td class="totalCharge">
                                            <input data-serial="@serial" asp-for="Loans[serial].TotalCharge" type="number" class="input-size readonly-input" min="0" value="120" readonly />
                                        </td>
                                        <td class="totalRefundAmount">
                                            <input data-serial="@serial" asp-for="Loans[serial].RefundAmount" type="number" class="input-size readonly-input" value="10920" readonly />
                                        </td>
                                        <td class="perInstallmentAmount">
                                            <input data-serial="@serial" asp-for="Loans[serial].PerInstallmentAmount" type="number" class="input-size readonly-input" value="437" readonly />
                                        </td>
                                    </tr>
                                    <input value="@SerialIncreaseByOne()" hidden />
                                }
                            </tbody>
                        </table>
                        <div class="d-flex justify-content-between mt-4">
                            <span></span>
                            <button type="submit" class="btn btn-primary">Submit Plan</button>
                        </div>
                    </form>
                </div>
            }
            else
            {
                <div class="text-center">
                    <h2 class="text-danger fw-bold">EMPTY</h2>
                    <span>No Member Added To this Group Yet!</span>
                    <p>
                        Click <a asp-action="MemberWithGroup"
                                 asp-controller="Group"
                                 asp-route-groupId="@Model.SelectedGroupId"
                                 asp-route-groupTypeId="1">
                            Here
                        </a> to add member to this Group
                    </p>
                </div>
            }
        </div>
    </div>
</section>



@section Scripts{
    <script type="text/javascript">

        // Prevent form submission onpress "Enter"
        $('#loan-details-form').on('keyup keypress', function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();
                return false;
            }
        });

        $(document).ready(()=>{


            var amount, interestRate, period, installmentInDays, totalCharge, processingFee, extraCharge;
            var totalDays, totalInstallment, totalInterest, totalFees, totalAmount, perInstallmentAmount;


            const primaryHelper = (serial)=>{
                amount = $(`#Loans_${serial}__LoansAmount`).val();
                interestRate = $(`#Loans_${serial}__InterestRate`).val();
                period = $(`#Loans_${serial}__SubmissionTimeInMonth`).val();
                installmentInDays = Number.parseInt($(`#Loans_${serial}__InstallmentDays`).val());
                totalCharge = $(`#Loans_${serial}__TotalCharge`).val();
                processingFee = Number.parseInt($(`#Loans_${serial}__ProcessingFee`).val());
                extraCharge = Number.parseInt($(`#Loans_${serial}__ExtraCharge`).val());

                totalDays = 30 * Number.parseInt(period);
                totalInstallment = Math.floor(totalDays / installmentInDays);
                totalInterest = amount * Number.parseFloat(interestRate) / 100;
                totalFees = processingFee + extraCharge;
                totalAmount = Math.ceil(Number.parseInt(amount) + totalInterest + + Number.parseInt(totalFees));
                perInstallmentAmount = Math.ceil(totalAmount / totalInstallment);

                console.log(totalAmount, perInstallmentAmount);

                $(`#Loans_${serial}__PerInstallmentAmount`).val(perInstallmentAmount);
                $(`#Loans_${serial}__InstallmentCount`).val(totalInstallment);
                $(`#Loans_${serial}__RefundAmount`).val(totalAmount);
                $(`#Loans_${serial}__TotalCharge`).val(totalFees);
                $(`#totalInterest-${serial}`).val(totalInterest);
            }

            

            $(".amount").on("change keypress", (event) => {
                let serial = event.target.dataset.serial;
                primaryHelper(serial);
            });

            $(".submissionTime").on("change keypress", (event) => {
                let serial = event.target.dataset.serial;
                primaryHelper(serial);
            });

            $(".installment-days").on("change keypress", (event) => {
                let serial = event.target.dataset.serial;
                primaryHelper(serial);
            });

            $(".interest-rate").on("change keypress", (event) => {
                let serial = event.target.dataset.serial;
                primaryHelper(serial);
            });

            //$(".processing-fee").on("change keypress", (event) => {
            //    let serial = event.target.dataset.serial;
            //    processingAndOtherfeeHelper(serial);
            //});

            $(".extraCharge").on("change keypress", (event) => {
                let serial = event.target.dataset.serial;
                primaryHelper(serial);
            });



        //$(".button-submit").on("click", (event)=>{
        //    let serial = event.target.dataset.serial;
        //    //var formId = "#form-" + serial;
        //    //var form = document.querySelector(formId)

        //    var formId = $(this).data("form-id");
        //    var form = $("#" + formId);

        //    console.log(form)
        //    debugger

        //    var formData = {};


        //    form.find('input[data-column-name]').each(function () {
        //        var columnName = $(this).data('column-name');
        //        var columnValue = $(this).val();
        //        formData[columnName] = columnValue;
        //        debugger
        //    });


        //var inputs = form.querySelectorAll("input");
        ////console.log(inputs)
        ////debugger;
        //inputs.forEach(function (input) {
        //    //debugger;
        //    if (!input.name.includes("VerificationToken")) {
        //        var fieldName = input.name.replace(/LoansBasic\[\d+\]\./, "");
        //        formData[fieldName] = input.value;
        //    }
        //});

        //var selects = form.querySelectorAll("select")

        //selects.forEach(function (select) {
        //    var fieldName = select.name.replace(/LoansBasic\[\d+\]\./, "");
        //    formData[fieldName] = select.value;
        //})

        //    console.log(formData)

        //    $.ajax({
        //        type: "POST",
        //        url: "/Api/Loanss",
        //        data: JSON.stringify(formData),
        //        datatype: "json",
        //        success: function (response) {
        //            debugger;
        //            console.log(response);
        //        },
        //        error: function (error) {
        //            debugger;
        //            console.log(error);
        //        }
        //    });


        //})


        //function submitForm(groupId) {
        //    var formId = "#form-" + groupId;
        //    var form = document.querySelector(formId)

        //    console.log(formId)

        //    var formData = {};

        //    var inputs = form.querySelectorAll("input");
        //    //console.log(inputs)
        //    //debugger;
        //    inputs.forEach(function (input) {
        //        //debugger;
        //        if(!input.name.includes("VerificationToken")){
        //            var fieldName = input.name.replace(/LoansBasic\[\d+\]\./, "");
        //            formData[fieldName] = input.value;
        //        }
        //    });

        //    var selects = form.querySelectorAll("select")

        //    selects.forEach(function (select) {
        //        var fieldName = select.name.replace(/LoansBasic\[\d+\]\./, "");
        //        formData[fieldName] = select.value;
        //    })

        //    console.log(JSON.stringify(formData))


        //    //fetch("/api/Loanss/", {
        //    //    method: "post",
        //    //    headers: {
        //    //        "Content-Type": "application/json",
        //    //        //'Content-Type': 'application/x-www-form-urlencoded',
        //    //    },

        //    //    body: formData
        //    //}).then((res)=>{
        //    //    console.log(res)
        //    //}).catch((error)=>{
        //    //    console.log(error)
        //    //})

        //    $.ajax({
        //        type: "POST",
        //        url: "/Api/Loanss",
        //        data: JSON.stringify(formData),
        //        datatype: "json",
        //        success: function (response) {
        //            debugger;
        //            console.log(response);
        //        },
        //        error: function (error) {
        //            debugger;
        //            console.log(error);
        //        }
        //    });

        //}
        })
    </script>
}





